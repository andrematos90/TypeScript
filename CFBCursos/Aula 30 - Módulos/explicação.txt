Em TypeScript, os "generics" são uma característica poderosa que permite criar componentes (funções, classes, interfaces) que podem trabalhar com diferentes tipos de dados, mantendo a flexibilidade e a segurança de tipos. Isso é especialmente útil quando você está escrevendo código que precisa ser reutilizável para diversos tipos de dados.

A sintaxe geral para a criação de "generics" em TypeScript envolve o uso de parâmetros de tipo. Esses parâmetros de tipo são colocados entre ângulos "<>" e podem ser usados em toda a definição de uma função, classe ou interface. Eles atuam como marcadores de posição para os tipos que serão usados em tempo de execução.

Aqui estão alguns exemplos de como usar "generics" em TypeScript:

Funções genéricas:

function identidade<T>(valor: T): T {
  return valor;
}

const numero: number = identidade(42); // Retorna o número 42
const texto: string = identidade("Olá, mundo!"); // Retorna a string "Olá, mundo!"
Neste exemplo, a função identidade é genérica e pode ser usada com qualquer tipo de dado. Ela aceita um valor de tipo T e retorna um valor do mesmo tipo.


Classes genéricas:

class Lista<T> {
  private elementos: T[] = [];

  adicionar(item: T): void {
    this.elementos.push(item);
  }

  obter(index: number): T {
    return this.elementos[index];
  }
}

const listaDeNumeros = new Lista<number>();
listaDeNumeros.adicionar(1);
listaDeNumeros.adicionar(2);

const primeiroNumero: number = listaDeNumeros.obter(0);

Neste exemplo, a classe Lista é genérica e pode ser usada para criar listas de qualquer tipo de dados.

Interfaces genéricas:

interface ParChaveValor<T, U> {
  chave: T;
  valor: U;
}

const par: ParChaveValor<string, number> = { chave: "idade", valor: 30 };

Neste exemplo, a interface ParChaveValor é genérica e aceita dois tipos de dados, T e U, para representar a chave e o valor.

"Generics" em TypeScript oferecem várias vantagens:

Reutilização de código: Você pode escrever funções e classes genéricas que funcionam com diferentes tipos de dados, evitando duplicação de código.

Segurança de tipos: TypeScript garante que os tipos usados com "generics" sejam consistentes, ajudando a evitar erros em tempo de execução.

Flexibilidade: Você pode adaptar componentes genéricos para diferentes necessidades, passando tipos diferentes como argumentos.

Documentação: "Generics" tornam o código mais expressivo e legível, uma vez que os tipos usados são claramente especificados.

Em resumo, os "generics" são uma parte fundamental do TypeScript que aumentam a capacidade de reutilização e a segurança de tipos em seu código, permitindo que você escreva componentes mais genéricos e flexíveis.