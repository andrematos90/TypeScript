Em TypeScript, você pode usar tipos em parâmetros de função para definir os tipos esperados dos argumentos que serão passados para a função. Isso permite que você forneça informações sobre os tipos dos valores que a função pode receber e, ao mesmo tempo, ajuda a evitar erros de tipo durante a compilação e a execução.

Aqui está como você pode usar tipos em parâmetros de função:

function greet(name: string) {
    console.log(`Hello, ${name}!`);
}

greet("Alice"); // Chamada válida
greet(123);     // Erro de tipo: Argumento do tipo 'number' não é atribuível ao parâmetro de tipo 'string'


No exemplo acima, a função greet recebe um parâmetro name do tipo string. Isso significa que, ao chamar a função, você só pode passar argumentos que sejam do tipo string. Se você tentar passar um valor que não seja uma string, o TypeScript emitirá um erro de tipo durante a compilação.

Além disso, você também pode usar tipos mais complexos nos parâmetros de função, como objetos, arrays ou tipos personalizados. Por exemplo:

interface Point {
    x: number;
    y: number;
}

function printPoint(point: Point) {
    console.log(`x: ${point.x}, y: ${point.y}`);
}

printPoint({ x: 5, y: 10 }); // Chamada válida
printPoint({ x: "hello", y: 20 }); // Erro de tipo: Argumento do tipo '{ x: string; y: number; }' não é atribuível ao parâmetro de tipo 'Point'


Isso ajuda a garantir que a função seja usada corretamente e a evitar erros lógicos que podem ocorrer quando tipos incorretos são passados como argumentos.

Se você quiser permitir que um parâmetro seja de vários tipos, você pode usar a sintaxe de tipos de união (union types). Por exemplo:

function printId(id: number | string) {
    console.log(`ID: ${id}`);
}

printId(123);    // Chamada válida
printId("abc");  // Chamada válida
printId(true);   // Erro de tipo: Argumento do tipo 'boolean' não é atribuível ao parâmetro de tipo 'string | number'


Em resumo, o uso de tipos nos parâmetros de função em TypeScript permite que você defina e garanta os tipos corretos dos argumentos que sua função espera receber, tornando seu código mais seguro e menos propenso a erros.